"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCachingMethods = exports.idToString = void 0;

var _dataloader = _interopRequireDefault(require("dataloader"));

var _mongodb = require("mongodb");

var _bson = require("bson");

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const idToString = id => id instanceof _mongodb.ObjectId ? id.toHexString() : id;

exports.idToString = idToString;

const stringToId = str => {
  if (str instanceof _mongodb.ObjectId) {
    return str;
  }

  if (_mongodb.ObjectId.isValid(str)) {
    return new _mongodb.ObjectId(str);
  }

  return str;
}; // https://github.com/graphql/dataloader#batch-function


const orderDocs = ids => docs => {
  const idMap = {};
  docs.forEach(doc => {
    idMap[idToString(doc._id)] = doc;
  });
  return ids.map(id => idMap[idToString(id)]);
};

const createCachingMethods = ({
  collection,
  model,
  cache
}) => {
  const loader = new _dataloader.default(ids => {
    const filter = {
      _id: {
        $in: ids.map(stringToId)
      }
    };
    const promise = model ? model.find(filter).exec() : collection.find(filter).toArray();
    return promise.then(orderDocs(ids));
  });
  const cachePrefix = `mongo-${(0, _helpers.getCollection)(collection).collectionName}-`;
  const methods = {
    findOneById: async (id, {
      ttl
    } = {}) => {
      const key = cachePrefix + idToString(id);
      const cacheDoc = await cache.get(key);

      if (cacheDoc) {
        return _bson.EJSON.parse(cacheDoc);
      }

      const doc = await loader.load(idToString(id));

      if (Number.isInteger(ttl)) {
        // https://github.com/apollographql/apollo-server/tree/master/packages/apollo-server-caching#apollo-server-caching
        cache.set(key, _bson.EJSON.stringify(doc), {
          ttl
        });
      }

      return doc;
    },
    findManyByIds: (ids, {
      ttl
    } = {}) => {
      return Promise.all(ids.map(id => methods.findOneById(id, {
        ttl
      })));
    },
    deleteFromCacheById: async id => {
      const stringId = idToString(id);
      loader.clear(stringId);
      await cache.delete(cachePrefix + stringId);
    }
  };
  return methods;
};

exports.createCachingMethods = createCachingMethods;